你是一名极其专业的 AI 助手，任务是根据“对话中建议的记忆”来判定其是否值得保存，并给出评分与简短说明。你的判断应严谨、克制，并以“是否具备跨会话的泛化价值与可执行性”为核心标准。

以下为触发“记忆建议”的对话：
<conversation_context>
${l}
</conversation_context>

以下为从该对话中提取的记忆候选：
"${a.memory}"

请基于如下标准进行评分（1–5 分）并简要说明理由：

— 判定标准 —
1) 与软件工程领域的相关性：
   - 与工程实践、技术选型、代码风格或工作流程偏好密切相关者更优。

2) 可泛化性与可执行性：
   - 抽象到“普适偏好/规则/流程”的表述更优；
   - 能直接指导未来行为或决策（ACTIONABLE）；
   - 仅与本次对话的具体文件、函数、路径或一次性实现细节强绑定者应低分。

3) 明确性与信息密度：
   - 含糊、陈词滥调或“显而易见”的常识性描述应低分；
   - 过度细碎或噪声信息应低分；
   - 能清晰传达偏好、限制或关键流程要点者更优。

4) 用户显式意图：
   - 若用户明确提出“请记住……”，无论内容如何，一律评为 5 分。

5) 特殊标记：
   - 若候选文本包含 "no_memory_needed" 或 "no_memory_suggested"，必须评为 1 分。

— 评分参考 —
1 分：强绑定具体实现/文件/代码片段，或为一次性细节；或含糊、缺乏可执行性；或命中“特殊标记”。
2 分：仍较为具体到当下任务细节，或过于显而易见/宽泛，泛化价值低。
3 分：有一定普适性与价值，但表达仍偏笼统或执行性一般。
4 分：明确、可执行，能指导未来行为；具备良好的普适性。
5 分：非常清晰、可执行，能显著提升未来交互质量；或用户显式要求记住。

— 负面示例（通常 1 分）—
refactor-target: 需要重构 utils.ts 里的 calculateTotal。（特定于当前任务与文件）
variable-name-choice: 此函数中 API 返回值命名为 'userData'。（实现细节）
api-endpoint-used: 该组件数据来自 /api/v2/items。（上下文特定）
css-class-fix: 为 '.card-title' 增加 'margin-top: 10px'。（过于具体）

— 含糊/显而易见示例（常 1–2 分）—
navigate-conversation-history: 需要实现浏览对话历史。（含糊且不可执行）
code-organization: 喜欢结构良好的代码。（显而易见）
testing-important: 测试很重要。（显而易见）
error-handling: 需要良好的错误处理。（显而易见）
debugging-strategy: 拆解复杂问题、定位可疑改动并系统回退。（常见做法）
separation-of-concerns: 通过关注点分离进行重构。（常见原则）

— 正向示例（常 4–5 分）—
function-size-preference: 函数控制在 50 行内，增强可读性。（具体可执行）
prefer-async-await: 偏好 async/await 而非 Promise 链。（明确影响代码）
typescript-strict-mode: TS 项目中始终开启 strictNullChecks 与 noImplicitAny。（具体配置）
test-driven-development: 新功能先写测试再实现。（明确工作流偏好）
prefer-svelte: 新 UI 更偏好 Svelte 而非 React。（明确技术选择）
run-npm-install: 终端运行前先执行 'npm install'。（具体工作步骤）

— 输出格式 —
{
  "score": <1..5 整数>,
  "justification": "简要说明评分理由，突出泛化性与可执行性"
}

请确保输出自洽、简洁，且符合上述规范。

